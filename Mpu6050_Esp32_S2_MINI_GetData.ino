
/*
    esp32 Nodemcu 01 MAC Address: A0:B7:65:58:59:64
    Esp32_S2_MINI   MAC Address: 84:FC:E6:C5:3A:6A  (1)
    Esp32_S2_MINI   MAC Address: 84:FC:E6:C5:C6:A4  (2)

    Esp32_S2_MINI  MAC Address: 84:FC:E6:C5:C6:86   (3)
    Esp32_S2_MINI  MAC Address: 84:FC:E6:C5:98:C0   (4)




*/

#include <WiFi.h>

#include <Wire.h>
int I2C_SDA = 8; // I2c pin data
int I2C_SCL = 7; // I2c pin clock
//#define I2C_SDA 8            // I2c pin data
//#define I2C_SCL 7            // I2c pin clock

#include <esp_now.h> 


//*********************** USART lib ***************************************
//*************************************************************************
#include <HardwareSerial.h>
HardwareSerial SerialPort(1); // use UART1
#define LED_PIN 15
#define TX_PIN 17
#define RX_PIN 18
#define VCC_MPU_CONTROL_PIN     33  // Mpu6050 power control with 2N7002
//#define START_SIGNAL_TIME_PIN   XXXX       //define after


//***************** Parameters  related to thermistor *********************
//*************************************************************************

#define TEMP_PIN    4         // thermistor is connected to GPIO 4 (Analog ADC1_CH0) 
float TempCel = 0.0;


//******************************* CONST DEFINE *************************************
//**********************************************************************************
/*
acc
FS_SEL Full          Scale Range         LSB Sensitivity
0                       ±2g                16384 LSB/g
1                       ±4g                8192 LSB/g
2                       ±8g                4096 LSB/g
3                       ±16g               2048 LSB/g

gyro
0                     ± 250 °/s            131 LSB/°/s
1                     ± 500 °/s            65.5 LSB/°/s
2                     ± 1000 °/s           32.8 LSB/°/s
3                     ± 2000 °/s           16.4 LSB/°/s

*/


//#define FS_SEL_acc      0x00
//#define FS_SEL_gyro     0x00
//#define ACC_RANGE       16384.0f 
//#define GYRO_RANGE      131.0f          //For a 250deg/s GYRO_RANGE we have to divide first the raw value by 131.0, according to the datasheet

#define FS_SEL_acc      0b11  //0x03
#define FS_SEL_gyro     0b11  //0x03  
#define ACC_RANGE       2048.0f 
#define GYRO_RANGE      16.4f          //For a 250deg/s GYRO_RANGE we have to divide first the raw value by 131.0, according to the datasheet
#define TEMP_RANGE      340.0f
#define betaDef         0.1f             // 2 * proportional gain
#define pi              3.14159265358979f
#define rad             pi/180.0f              // coverting factor from degrees to radians

//*********************** MPU registers************************************
//*************************************************************************
#define MPU_I2C_ADDR        0x68  // MPU6050 I2C address
#define WHO_AM_I_REG        0x75
#define PWR_MGMT_1_REG      0x6B
#define SMPLRT_DIV_REG      0x19
#define ACCEL_CONFIG_REG    0x1C
#define GYRO_CONFIG_REG     0x1B
#define ACCEL_XOUT_H_REG    0x3B
#define GYRO_XOUT_H_REG     0x43
#define TEMP_OUT_H_REG      0x41

//*********************** Variables declaration ************************************
//**********************************************************************************
volatile float beta = betaDef;                // 2 * proportional gain (Kp)
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;  // quaternion of sensor frame relative to auxiliary frame

float GyroX, GyroY, GyroZ,AccX, AccY, AccZ,temperature;
int16_t  Gx, Gy,Gz, Ax, Ay, Az, tmp;
float mean_Gx,mean_Gy,mean_Gz = 0.0;
float GyroErrorX, GyroErrorY, GyroErrorZ = 0.0;
float range = 131.0f;                  //For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet

//ideal case for  Acc data
float minAx = -1.0f;
float maxAx = 1.0f;
float minAy = -1.0f;
float maxAy = 1.0f;
float minAz = -1.0f;
float maxAz = 1.0f;

float offSetX,offSetY,offSetZ = 0.0f;
float scaleFactX, scaleFactY, scaleFactZ =0.0f;

float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;
float roll, pitch, yaw;
float dt, sampleFreq, currentTime, previousTime;
uint8_t checkMpuConnected;


float serialOutPutCount = 0.0;



void setup() {

  
// initialize digital pin LED_PIN and VCC_MPU_CONTROL_PIN as  output.
    pinMode(LED_PIN, OUTPUT);
    pinMode(VCC_MPU_CONTROL_PIN, OUTPUT);    // Mpu power suply control pin 
    delay(10);
    digitalWrite(VCC_MPU_CONTROL_PIN, HIGH);
    delay(50);

 // Int Serial Port
    SerialPort.begin(115200, SERIAL_8N1,RX_PIN, TX_PIN);    // Setup Serial Monitor
    delay(50);
    
//    Wire.begin(I2C_SDA, I2C_SCL);                           // Wire.begin() with no default pin 
    Wire.setPins(I2C_SDA, I2C_SCL);  //Call this function before begin() function to change the pins from the default ones.
    Wire.begin();                           // Wire.begin() with no default pin 
    delay(50);


// Initialise mpu6050 
    MPU6050_Init();                                         // Initialize mpu


// ***************** MAC ADDRESS ******************************
// ************************************************************
  WiFi.mode(WIFI_MODE_STA);
  // Print MAC Address to Serial monitor
  SerialPort.print("MAC Address: ");
  SerialPort.println(WiFi.macAddress());


  // Gyro calibration data compute
//   gyro_IMU_error();
   
//   mean_Gx = GyroErrorX;  // 0.027 is the value of GyroErrorX
//   mean_Gy = GyroErrorY ; // 0.010 is the value of  GyroErrorY
//   mean_Gz = GyroErrorZ;
  
// **********  Mean value  Esp32_S2_MINI   MAC Address: 84:FC:E6:C5:3A:6A  (1) ********
//**************************************************************************************

////    pratical case for Gyro given sesor
//    mean_Gx =  1.130;  // the value of GyroErrorX
//    mean_Gy =  -0.009; // the value of  GyroErrorY
//    mean_Gz =  0.011;
////    pratical case for  Acc given sesor
//    minAx = -0.971f;
//    maxAx = 1.041f;
//    minAy = -1.01f;
//    maxAy = 1.004f;
//    minAz = -0.908f;
//    maxAz = 1.113f;

// // **********  Mean value   Esp32_S2_MINI   MAC Address: 84:FC:E6:C5:C6:A4  (2) ********
// //**************************************************************************************
// //    pratical case for Gyro given sesor
//     mean_Gx = -0.034;  //  the value of GyroErrorX
//     mean_Gy = 0.004 ; //  is the value of  GyroErrorY
//     mean_Gz = 0.014 ;
// //    pratical case for  Acc given sesor
//     minAx = -0.945f;
//     maxAx =  1.053f;
//     minAy = -1.027f;
//     maxAy = 0.971f;
//     minAz = -1.004f;
//     maxAz = 1.040f;


// ************  Mean value  Esp32_S2_MINI  MAC Address: 84:FC:E6:C5:C6:86  (3) ********
//**************************************************************************************
 /*
  // Fs = 0x00
    //gyro
    mean_Gx = 0.033;  //  the value of GyroErrorX
    mean_Gy = -0.036; //  is the value of  GyroErrorY
    mean_Gz = 0.001;
    //acc
    minAx = -0.948;      maxAx =  1.070;
    minAy = -1.005;      maxAy = 0.995;
    minAz = -1.152;      maxAz = 0.924;
    
 */

 
// /*
  // Fs = 0x03
    //gyro
    mean_Gx = 0.284;  //  the value of GyroErrorX
    mean_Gy = -0.258; //  is the value of  GyroErrorY
    mean_Gz = 0.022;
    //acc
//    minAx = -0.948;      maxAx = 1.070;
//    minAy = -1.005;      maxAy = 0.995;
//    minAz = -1.152;      maxAz = 0.924;
    
// */


//************  Mean value  Esp32_S2_MINI  MAC Address: 84:FC:E6:C5:98:C0  (4) *********
//**************************************************************************************

/*
  // Fs = 0x00
    //gyro
    mean_Gx = 0.022;  //  the value of GyroErrorX
    mean_Gy = -0.011 ; //  is the value of  GyroErrorY
    mean_Gz = -0.003;
    //acc
    minAx = -0.980;     maxAx =  1.022;
    minAy = -1.016;     maxAy = 0.980;   
    minAz = -0.980;     maxAz = 1.058;   

*/


/*
 // Fs = 0x03
       //gyro
      mean_Gx = 0.142;  //  the value of GyroErrorX
      mean_Gy = -0.099 ; //  is the value of  GyroErrorY
      mean_Gz = -0.028;
       //Acc
      minAx = -7.820;   maxAx =  8.158;
      minAy = -8.170;   maxAy = 7.854;   
      minAz = -8.125;   maxAz = 8.200;

*/


//// ************  Mean value  Esp32_S2_MINI  MAC Address: 84:FC:E6:C5:98:C0  (5) ********
////**************************************************************************************
////    pratical case for Gyro given sesor
//    mean_Gx = 0.022;  //  the value of GyroErrorX
//    mean_Gy = -0.011 ; //  is the value of  GyroErrorY
//    mean_Gz = -0.003;
////    pratical case for  Acc given sesor
//    minAx = -0.980;
//    maxAx =  1.022;
//    minAy = -1.016;   
//    maxAy = 0.980;   
//    minAz = -0.980;
//    maxAz = 1.058;   



//********************* Acc calibration scale **********************
//******************************************************************

  offSetX = off_set(minAx ,maxAx);
  offSetY = off_set(minAy ,maxAy);
  offSetZ = off_set(minAz ,maxAz);
  
  scaleFactX = scale_factor (maxAx, offSetX);
  scaleFactY = scale_factor (maxAy, offSetY);
  scaleFactZ = scale_factor (maxAz, offSetZ);

  previousTime = millis();  
  serialOutPutCount = millis();
  delay(20);

}

// the loop function runs over and over again forever
void loop() {
  
  currentTime = millis();            // Current time actual time read
  dt = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
  sampleFreq = 1/dt; // in Hz


// ================  Data reading from Mpu6050 ========================//

  readMpuData();

// noise filtration
//  GyroX = thresholdFucnction(GyroX, 0.014);
//  GyroY = thresholdFucnction(GyroY, 0.014);
//  GyroZ = thresholdFucnction(GyroZ, 0.014);


//************************** Madgwick Filter Funct  ***********************************
//*************************************************************************************
//
    MadgwickAHRSupdateIMU(GyroX, GyroY, GyroZ, AccX, AccY, AccZ);
    eulerAngles(q0, q1, q2, q3, &roll, &pitch, &yaw);

 if ((millis()-serialOutPutCount)/1000 > 0.08){ //0.08s = 12.5 Hz
  serialOutPutCount = millis();
  digitalWrite(LED_PIN,!digitalRead(LED_PIN));   // Toggle LED_PIN
  
//  /*
//print sensor data
//  SerialPort.print(dt,3);
  SerialPort.print(sampleFreq,3);
  SerialPort.print(" , ");
  SerialPort.print(GyroX,3);
  SerialPort.print(" , ");
  SerialPort.print(GyroY,3);
  SerialPort.print(" , ");
  SerialPort.print(GyroZ,3);
  SerialPort.print(" , ");
  SerialPort.print(AccX,3);
  SerialPort.print(" , ");
  SerialPort.print(AccY,3);
  SerialPort.print(" , ");
  SerialPort.print(AccZ,3);
  SerialPort.print(" , ");
  SerialPort.println(temperature,3);
//*/
  
 }

////printing gyro errors
// gyro_IMU_error(); 

// SerialPort.print("MAC Address: ");
// SerialPort.println(WiFi.macAddress());



//  // Print the values on the serial monitor
//  SerialPort.print(sampleFreq,3);
//  SerialPort.print(" , ");
//  SerialPort.print(roll,3);
//  SerialPort.print(" , ");
//  SerialPort.print(pitch,3);
//  SerialPort.print(" , ");
//  SerialPort.print(yaw,3);
//  SerialPort.print(" , ");
////  Serial.println(temperature,1);  // with mpu5060 temperature  sensor
//  SerialPort.println(TempCel,1);  // with Thermistor temperature  sensor
//  
  
//   delay(10);
 previousTime = currentTime;        // Previous time is stored before the actual time read
 
}

void MPU6050_Init() {
  delay(100);
  uint8_t ReadfromReg;
  uint8_t WriteToReg;

  /* We need to check if the sensor is responding by reading the “WHO_AM_I_REG (0x75)” Register.
    If the sensor responds with 0x68, this means it’s available and good to go.*/

  Wire.beginTransmission(MPU_I2C_ADDR);
  Wire.write(WHO_AM_I_REG);
  Wire.endTransmission(false);
  Wire.requestFrom((uint16_t)MPU_I2C_ADDR, (size_t)1, true);
  ReadfromReg = Wire.read(); // 0x68  = 104 will be returned by the sensor if everything goes wellvalue
  checkMpuConnected = ReadfromReg;
  SerialPort.print("WHO_AM_I_REG read value :  ");
  SerialPort.println(ReadfromReg);
  delay(100);

  if (ReadfromReg == 104)  {

    /* we will wake the sensor up and in order to do that we will write to the “PWR_MGMT_1 (0x6B)” Register
      On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz*/
    WriteToReg = 0x00;
    Wire.beginTransmission(MPU_I2C_ADDR);
    Wire.write(PWR_MGMT_1_REG);
    Wire.write(WriteToReg);
    Wire.endTransmission(true);
    delay(100);

    /*we have to set the Data output Rate or Sample Rate. This can be done by writing into “SMPLRT_DIV (0x19)” Register.
      This register specifies the divider from the gyroscope output rate used to generate the Sample Rate for the MPU6050.
      As the formula says Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV). Where Gyroscope Output Rate is 8KHz,
      To get the sample rate of 1KHz, we need to use the SMPLRT_DIV as �?7’.      */
    WriteToReg = 0x07;
    Wire.beginTransmission(MPU_I2C_ADDR);
    Wire.write(SMPLRT_DIV_REG);
    Wire.write(WriteToReg);
    Wire.endTransmission(true);
    delay(100);


    /*We need to configure the Accelerometer and Gyroscope registers and to do so,
      we need to modify “GYRO_CONFIG (0x1B)” and “ACCEL_CONFIG (0x1C)”Registers.
      Writing (0x00) to both of these registers would set the Full scale ACC_RANGE of ± 2g in ACCEL_CONFIGRegister
      and a Full scale GYRO_RANGE of ± 250 °/s in GYRO_CONFIGRegister along with Self-test disabled.*/

    WriteToReg = FS_SEL_acc;
    Wire.beginTransmission(MPU_I2C_ADDR);
    Wire.write(ACCEL_CONFIG_REG);     // Set accelerometer configuration in ACCEL_CONFIG Register
    Wire.write(WriteToReg);            // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
    Wire.endTransmission(true);
    delay(100);

    WriteToReg = FS_SEL_gyro;
    Wire.beginTransmission(MPU_I2C_ADDR);
    Wire.write(GYRO_CONFIG_REG);     // Set Gyroscopic configuration in GYRO_CONFIG Register
    Wire.write(WriteToReg);  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
    Wire.endTransmission(true);
    delay(100);
  } else {
    while (checkMpuConnected != 104) {
      SerialPort.println("Sensor on I2C is not connected, Connect the sensor please");
      MPU6050_Init();
    }
  }

}   //void MPU6050_Init (void)

void gyro_IMU_error() {
  
  // We can call this funtion in the setup section to calculate the gyro data error. 
  // From here we will get the error values used in the above equations printed on the Serial Monitor.
  // Note that we should place the IMU flat in order to get the proper values, so that we then can the correct values

  // Read gyro values 500 times
  int n =1000;
  int c = 0;
  while (c < n) {
 
    // === Read gyroscope data === //
    Wire.beginTransmission(MPU_I2C_ADDR);
    Wire.write(GYRO_XOUT_H_REG); // Gyro data first register address 0x43 (GYRO_XOUT_H_REG) 
    Wire.endTransmission(false);
//     Wire.requestFrom(MPU_I2C_ADDR,6,1);                // 1st defition of "requestFrom" function
    Wire.requestFrom((uint16_t)MPU_I2C_ADDR,(size_t)6, true);    // Read 4 registers total, each axis value is stored in 2 registers  // 2st defition of "requestFrom" function
    
    GyroX = ((int16_t(Wire.read() << 8 | Wire.read()))/GYRO_RANGE)*rad; // For a 250deg/s GYRO_RANGE we have to divide first the raw value by 131.0, according to the datasheet
    GyroY = ((int16_t(Wire.read() << 8 | Wire.read()))/GYRO_RANGE)*rad;
    GyroZ = ((int16_t(Wire.read() << 8 | Wire.read()))/GYRO_RANGE)*rad;

    // Sum all readings
    GyroErrorX +=GyroX;
    GyroErrorY +=GyroY;
    GyroErrorZ +=GyroZ;
    c++;
  }
  
  //Divide the sum by "n" to get the error value
  GyroErrorX /=n;
  GyroErrorY /=n;
  GyroErrorZ /=n;
  
  // Print the error values on the Serial Monitor
  SerialPort.print("GyroErrorX: ");
  SerialPort.print(GyroErrorX,3);
  SerialPort.print(" , ");
  SerialPort.print("GyroErrorY: ");
  SerialPort.print(GyroErrorY,3);
  SerialPort.print(" , ");
  SerialPort.print("GyroErrorZ: ");
  SerialPort.println(GyroErrorZ,3);
}


void readMpuData(){
  
  delay(5);
  Wire.beginTransmission(MPU_I2C_ADDR);
  Wire.write(ACCEL_XOUT_H_REG); // Start with register 0x3B (ACCEL_XOUT_H_REG)
  Wire.endTransmission(false);

//  Wire.requestFrom(MPU_I2C_ADDR,6,1);                      // 1st defition of "requestFrom" function
  Wire.requestFrom((uint16_t)MPU_I2C_ADDR,(size_t)6, true);  // Read 6 registers total, each axis value is stored in 2 registers // 2st defition of "requestFrom" function

  //For a ACC_RANGE of +-2g, we need to divide the raw values by 16384 (ACC_RANGE), according to the datasheetand write 0x00 in ACCEL_CONFIG_REG
  //For a ACC_RANGE of +-4g, we need to divide the raw values by 8192 (ACC_RANGE), according to the datasheet and write 0x01 in ACCEL_CONFIG_REG
  
  AccX = (int16_t(Wire.read() << 8 | Wire.read()))/ACC_RANGE; // X-axis value
  AccY = (int16_t(Wire.read() << 8 | Wire.read()))/ACC_RANGE; // Y-axis value
  AccZ = (int16_t(Wire.read() << 8 | Wire.read()))/ACC_RANGE; // Z-axis value

// //apply offset and scale factor to calibrite data
  AccX = (AccX-offSetX)*scaleFactX;
  AccY = (AccY-offSetY)*scaleFactY;
  AccZ = (AccZ-offSetZ)*scaleFactZ;

  Wire.beginTransmission(MPU_I2C_ADDR);
  Wire.write(TEMP_OUT_H_REG); // Start with register 0x41 (TEMP_OUT_H)
  Wire.endTransmission(false);

//  Wire.requestFrom(MPU_I2C_ADDR,2,1);                // 1st defition of "requestFrom" function
  Wire.requestFrom((uint16_t)MPU_I2C_ADDR,(size_t)2, true);    // Read 2 registers total, each value is stored in 2 registers  // 2st defition of "requestFrom" function

//  Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53
  temperature = ((int16_t(Wire.read() << 8 | Wire.read()))/ TEMP_RANGE) + 36.53 ; // temperature in °C
  
  // === Read gyroscope data === //
  Wire.beginTransmission(MPU_I2C_ADDR);
  Wire.write(GYRO_XOUT_H_REG); // Gyro data first register address 0x43 (GYRO_XOUT_H_REG) 
  Wire.endTransmission(false);

//  Wire.requestFrom(MPU_I2C_ADDR,6,1);               // 1st defition of "requestFrom" function 
  Wire.requestFrom((uint16_t)MPU_I2C_ADDR, (size_t)6, true);   // Read 4 registers total, each axis value is stored in 2 registers  // 2st defition of "requestFrom" function

  GyroX = ((int16_t(Wire.read() << 8 | Wire.read()))/GYRO_RANGE)*rad; // For a 250deg/s GYRO_RANGE we have to divide first the raw value by 131.0, according to the datasheet
  GyroY = ((int16_t(Wire.read() << 8 | Wire.read()))/GYRO_RANGE)*rad;
  GyroZ = ((int16_t(Wire.read() << 8 | Wire.read()))/GYRO_RANGE)*rad;

// Correct the outputs with the calculated error values
  GyroX -= mean_Gx;
  GyroY -= mean_Gy;
  GyroZ -= mean_Gz;
 
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
